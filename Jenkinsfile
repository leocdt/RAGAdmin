pipeline {
    agent any

    environment {
        PYTHON_PATH = '/usr/bin/python3.11'
        VENV_NAME = 'django_venv'
        GITHUB_REPO = 'https://github.com/leocdt/RAGAdmin.git'
        BACKEND_DIR = 'backend'
        NVM_DIR = '/var/lib/jenkins/.nvm'
        NODE_VERSION = '16'
        PIP_CACHE_DIR = '/var/lib/jenkins/.cache/pip'
        PIP_NO_CACHE_DIR = 'false'
        VENV_PERSIST = '/var/lib/jenkins/envs/django_venv'
        NPM_CACHE_DIR = '/var/lib/jenkins/.npm'
        NPM_CONFIG_CACHE = '/var/lib/jenkins/.npm'
        MODEL_NAME = 'llama3.2:3b'
        DIR = '/var/lib/jenkins/workspace/Build'
    }

    stages {
        stage('Check Internet Connection') {
            steps {
                echo 'üåê V√©rification de la connexion Internet...'
                sh '''
                    if ping -c 3 8.8.8.8 >/dev/null 2>&1; then
                        echo "‚úÖ Connexion Internet active."
                    else
                        echo "‚ùå Erreur: Pas de connexion Internet."
                        exit 1
                    fi
                '''
            }
        }

        stage('Check and Install Git if Necessary') {
            steps {
                echo 'üîß Installation de Git si n√©cessaire...'
                sh '''
                    if ! command -v git >/dev/null 2>&1; then
                        echo "‚ùå Git non trouv√©. Installation..."
                        sudo apt update && sudo apt install -y git
                        if ! command -v git >/dev/null 2>&1; then
                            echo "‚ùå √âchec de l'installation de Git."
                            exit 1
                        fi
                    fi
                    echo "‚úÖ Git install√© : $(git --version)"
                '''
            }
        }

        stage('Check and Install Python 3 if Necessary') {
            steps {
                echo 'üîß V√©rification et installation de Python 3 si n√©cessaire...'
                sh '''
            if ! command -v python3.11 >/dev/null 2>&1; then
                echo "‚ùå Python 3 non trouv√©. Installation..."
                sudo apt update && sudo apt install python3.11
            fi
            if ! command -v python3.11-venv >/dev/null 2>&1; then
                echo "‚ùå Pinstalation de venv"
                sudo apt install python3.11-venv -y
            fi
            # Install Python development headers and build dependencies
            sudo apt install python3.11-dev build-essential g++ -y
            
            echo "‚úÖ python3.11 disponible: $(python3.11 --version)"
        '''
            }
        }

        stage('Install Build Dependencies') {
            steps {
                echo 'üîß Installation des d√©pendances de build...'
                sh '''
                    sudo apt update
                    sudo apt install -y build-essential
                    sudo apt install -y g++-10
                    echo "‚úÖ D√©pendances de build install√©es"
                '''
            }
        }

        stage('Clean Workspace') {
            steps {
                echo "üßπ Nettoyage de l'espace de travail..."
                cleanWs()
                echo '‚úÖ Espace de travail nettoy√©'
            }
        }

        stage('Clean Disk Space') {
            steps {
                echo 'üßπ Nettoyage de l\'espace disque...'
                sh '''
                    # Afficher l'espace disque avant nettoyage
                    echo "Espace disque avant nettoyage:"
                    df -h

                    # Nettoyer le cache apt
                    sudo apt-get clean
                    sudo apt-get autoremove -y

                    # Supprimer les anciens fichiers temporaires
                    sudo rm -rf /tmp/*
                    sudo rm -rf /var/tmp/*

                    # Nettoyer les caches pip
                    rm -rf ~/.cache/pip
                    rm -rf /var/lib/jenkins/.cache/pip

                    # Nettoyer les caches npm
                    rm -rf ~/.npm
                    rm -rf /var/lib/jenkins/.npm

                    # Afficher l'espace disque apr√®s nettoyage
                    echo "Espace disque apr√®s nettoyage:"
                    df -h
                '''
            }
        }

        stage('Check Node.js and Install if Necessary') {
            steps {
                echo 'üîç V√©rification de Node.js et npm...'
                sh '''
                    # V√©rifier si Node.js est install√©
                    if command -v node >/dev/null 2>&1; then
                        NODE_CURRENT=$(node -v | cut -d. -f1 | tr -d v)
                        if [ "$NODE_CURRENT" -ge 16 ]; then
                            echo "‚úÖ Node.js version suffisante trouv√©e: $(node -v)"
                    if command -v npm >/dev/null 2>&1; then
                        echo "‚úÖ npm trouv√©: $(npm -v)"
                    else
                        echo "‚ùå npm non trouv√©. Lancement de l'installation..."
                        apt install npm
                        exit 1  # Signal pour lancer l'installation de npm
                    fi
                    exit 0  # Node.js et npm sont suffisants, fin du processus
                else
                    echo "‚ö†Ô∏è Node.js version insuffisante: $(node -v)"
                fi  
                else
                    echo "‚ùå Node.js non trouv√©"
                fi
                # Installer nvm s'il n'est pas d√©j√† pr√©sent
                if [ ! -d "/var/lib/jenkins/.nvm" ]; then
                    echo "‚öôÔ∏è Installation de nvm..."
                    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
                fi
                # Charger nvm
                    export NVM_DIR="/var/lib/jenkins/.nvm"
                    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

                    # Installer Node.js version 16 si n√©cessaire
                    echo "‚öôÔ∏è Installation de Node.js version 16 via nvm..."
                    nvm install 16
                    nvm alias default 16
                    nvm use default

                    # V√©rification finale des versions install√©es
                    echo "‚úÖ Node.js install√©: $(node -v)"
                    echo "‚úÖ npm install√©: $(npm -v)"
                '''
            }
        }
        
        stage('Check npm Installation') {
            steps {
                echo 'üîç V√©rification de l\'installation de npm...'
                sh '''
                    if ! command -v npm >/dev/null 2>&1; then
                        echo "‚ùå npm non trouv√©. Installation..."
                        sudo apt update && sudo apt install -y npm
                        if ! command -v npm >/dev/null 2>&1; then
                            echo "‚ùå √âchec de l'installation de npm."
                            exit 1
                        fi
                    fi
                    echo "‚úÖ npm install√© : $(npm -v)"
                '''
            }
        }

        stage('Clone Repo') {
            steps {
                echo 'üì• Clonage du repository...'
                checkout scmGit(
                    branches: [[name: 'main']],
                    extensions: [],
                    userRemoteConfigs: [[url: "${GITHUB_REPO}"]]
                )
                sh '''
                    if [ -d "${BACKEND_DIR}" ]; then
                        echo "‚úÖ Repository clon√© avec succ√®s"
                        ls -la
                    else
                        echo "‚ùå Erreur: Dossier backend non trouv√©"
                        exit 1
                    fi
                '''
            }
        }

        stage('Create Venv') {
            steps {
                echo "üîß V√©rification/Cr√©ation de l'environnement virtuel..."
                dir("${BACKEND_DIR}") {
                    sh '''
                        if [ ! -d "${VENV_PERSIST}" ]; then
                            echo "Cr√©ation d'un nouvel environnement virtuel..."
                            python3.11 -m venv ${VENV_PERSIST}
                        else
                            echo "Utilisation de l'environnement virtuel existant"
                        fi
                        ln -sf ${VENV_PERSIST} ${VENV_NAME}
                        . ${VENV_NAME}/bin/activate
                        echo "‚úÖ Environnement virtuel configur√©"
                    '''
                }
            }
        }

        stage('Update Pip') {
            steps {
                echo '‚¨ÜÔ∏è Mise √† jour de pip...'
                dir("${BACKEND_DIR}") {
                    sh '''
                        . ${VENV_NAME}/bin/activate
                        python -m pip install --upgrade pip || { echo "‚ùå Erreur: Mise √† jour pip √©chou√©e"; exit 1; }
                        echo "‚úÖ Pip mis √† jour"
                    '''
                }
            }
        }

        stage('Install Backend Requirements') {
            steps {
                echo 'üì¶ Installation des d√©pendances backend...'
                dir("${BACKEND_DIR}") {
                    sh '''
                        . ${VENV_NAME}/bin/activate
                        # Install with no cache to save disk space
                        python -m pip install --no-cache-dir -r requirements.txt || { echo "‚ùå Erreur: Installation d√©pendances √©chou√©e"; exit 1; }
                        echo "‚úÖ D√©pendances backend install√©es"
                    '''
                }
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                echo 'üì¶ Installation des d√©pendances frontend...'
                dir("${DIR}") {
                    sh '''
                        npm i || { echo "‚ùå Erreur: Installation des d√©pendances frontend √©chou√©e"; exit 1; }
                        echo "‚úÖ D√©pendances frontend install√©es"
                    '''
                }
            }
        }

        stage('Check and Setup Ollama') {
            steps {
                echo "üîç V√©rification d'Ollama et pr√©paration du serveur..."
                sh '''
                    # Fonction pour v√©rifier si une commande existe
                    command_exists() {
                        command -v "$1" >/dev/null 2>&1
                    }
        
                    # V√©rifier si Ollama est install√©
                    if ! command_exists ollama; then
                        echo "‚ùå Ollama non trouv√©. Installation..."
                        curl -fsSL https://ollama.com/install.sh | sh
                        if ! command_exists ollama; then
                            echo "‚ùå √âchec de l'installation d'Ollama."
                            exit 1
                        fi
                        echo "‚úÖ Ollama install√© avec succ√®s."
                    else
                        echo "‚úÖ Ollama d√©j√† install√© : $(ollama --version)"
                    fi
        
                    # Lancer Ollama Serve
                    echo "‚öôÔ∏è Lancement d'Ollama Serve..."
                    nohup ollama serve >/dev/null 2>&1 &
        
                    # V√©rifier si le mod√®le requis est install√©
                    MODEL_NAME="${MODEL_NAME}"  # Mod√®le valide
                    if ! ollama list | grep -q "${MODEL_NAME}"; then
                        echo "‚ö†Ô∏è Mod√®le '${MODEL_NAME}' non trouv√©. T√©l√©chargement..."
                        ollama pull "${MODEL_NAME}"
                        if ! ollama list | grep -q "${MODEL_NAME}"; then
                            echo "‚ùå √âchec du t√©l√©chargement du mod√®le '${MODEL_NAME}'."
                            exit 1
                        fi
                        echo "‚úÖ Mod√®le '${MODEL_NAME}' t√©l√©charg√© avec succ√®s."
                    else
                        echo "‚úÖ Mod√®le '${MODEL_NAME}' d√©j√† disponible."
                    fi
                '''
            }
        }
        
        stage('Fix SQLite for Python') {
            steps {
                sh '''
                    # Trouver le chemin de la biblioth√®que sqlite3
                    SQLITE_LIB_PATH=$(dirname $(find /usr/local -name "libsqlite3.so" | head -n 1))
                    export LD_LIBRARY_PATH=$SQLITE_LIB_PATH:$LD_LIBRARY_PATH
        
                    # V√©rifier la version de sqlite3 utilis√©e par Python
                    echo "Version de sqlite3 dans Python apr√®s correction :"
                    python3.11 -c "import sqlite3; print(sqlite3.sqlite_version)"
                '''
            }
        }

        stage('Start Backend Server') {
            steps {
                echo 'üöÄ D√©marrage du serveur backend...'
                dir("${BACKEND_DIR}") {
                    sh '''
                        # Kill any existing process on port 8000
                        fuser -k 8000/tcp || true
                        . ${VENV_NAME}/bin/activate
                        echo "üîç V√©rification des d√©pendances install√©es..."
                        pip freeze

                        echo "üü¢ Tentative de d√©marrage du serveur Django..."
                        LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH nohup python manage.py runserver 0.0.0.0:8000 > backend.log 2>&1 &

                        echo "‚åõ Attente du d√©marrage du serveur..."
                        sleep 12

                        echo "üîç Logs backend :"
                        tail -n 20 backend.log

                        echo "üîç V√©rification de l'accessibilit√© du serveur..."
                        if ! curl -v http://localhost:8000/admin > /dev/null; then
                            echo "‚ùå Erreur: Le serveur backend n'est pas accessible"
                            exit 1
                        fi

                        echo "‚úÖ Serveur backend d√©marr√© avec succ√®s"
                    '''
                }
            }
        }

        stage('Start Frontend Server') {
            steps {
                echo 'üöÄ D√©marrage du serveur frontend...'
                sh '''
                    # Kill any existing process on port 5173
                    fuser -k 5173/tcp || true
                    # Start the frontend server with host binding
                    nohup npm run dev -- --host 0.0.0.0 > frontend.log 2>&1 &
                    # Wait for server to start
                    sleep 10
                    # Verify server is running
                    if curl -s http://localhost:5173 > /dev/null; then
                        echo "‚úÖ Serveur frontend d√©marr√© et accessible"
                    else
                        echo "‚ùå Erreur: Le serveur frontend n'est pas accessible"
                        echo "üîç Logs frontend :"
                        tail -n 20 frontend.log
                        exit 1
                    fi
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo 'üß™ Ex√©cution des tests backend...'
                dir("${BACKEND_DIR}") {
                    sh '''
                        . ${VENV_NAME}/bin/activate
                        python manage.py test || { echo "‚ùå Erreur: Tests √©chou√©s"; exit 1; }
                        echo "‚úÖ Tests backend r√©ussis"
                    '''
                }
            }
        }
    }

    post {
        always {
            echo '‚úÖ Pipeline ex√©cut√©e avec succ√®s. Les serveurs restent actifs.'
        }
    }
}